<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>